<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>